<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>